<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>